<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>